<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>